<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>